<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>